<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>